<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>